<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>